<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>